<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>